<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>